<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>